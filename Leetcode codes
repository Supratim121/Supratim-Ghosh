int* minOperations(char* boxes, int* returnSize) {
    int n = strlen(boxes);
    int* left = malloc(sizeof(int) * n);
    int* right = malloc(sizeof(int) * n);
    memset(left, 0, sizeof(int) * n);
    memset(right, 0, sizeof(int) * n);
    for (int i = 1, count = 0; i < n; i++) {
        if (boxes[i - 1] == '1') {
            count++;
        }
        left[i] = left[i - 1] + count;
    }
    for (int i = n - 2, count = 0; i >= 0; i--) {
        if (boxes[i + 1] == '1') {
            count++;
        }
        right[i] = right[i + 1] + count;
    }
    int* ans = malloc(sizeof(int) * n);
    for (int i = 0; i < n; i++) {
        ans[i] = left[i] + right[i];
    }
    free(left);
    free(right);
    *returnSize = n;
    return ans;
}


int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    for (int i = 0; i < numsSize; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            if (nums[j] == target - nums[i]) {
                int* result = malloc(sizeof(int) * 2);
                result[0] = i;
                result[1] = j;
                *returnSize = 2;
                return result;
            }
        }
    }
    // Return an empty array if no solution is found
    *returnSize = 0;
    return malloc(sizeof(int) * 0);
}


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummyHead = malloc(sizeof(struct ListNode));
    dummyHead->val = 0;
    dummyHead->next = NULL;
    struct ListNode* curr = dummyHead;
    int carry = 0;
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int x = (l1 != NULL) ? l1->val : 0;
        int y = (l2 != NULL) ? l2->val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr->next = malloc(sizeof(struct ListNode));
        curr->next->val = sum % 10;
        curr->next->next = NULL;
        curr = curr->next;
        if (l1 != NULL) l1 = l1->next;
        if (l2 != NULL) l2 = l2->next;
    }
    struct ListNode* result = dummyHead->next;
    free(dummyHead);  // Free the memory allocated for dummyHead
    return result;
}


int lengthOfLongestSubstring(char * s){
    /*letter_map is to keep track if we saw this character in this substring*/
    int letter_map[128] = {0}, res = 0;
    char* start = s, *end = s;
    
    while (*end) {
        /* If we reached a letter we saw already - check max length and start a new substring*/
        if (letter_map[*end]) {
            res = (end - start > res) ? end - start : res;
            while (*start != *end) {
                letter_map[*start] = 0;
                start++;
            }
            start++;
            end++;
        }
        else {
            letter_map[*end] = 1;
            end++;
        }  
    }
    return end-start > res ? end-start : res;
}



double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2,
                              int nums2Size) {
    int m = nums1Size, n = nums2Size;
    int p1 = 0, p2 = 0;
    int getMin() {
        if (p1 < m && p2 < n) {
            return nums1[p1] < nums2[p2] ? nums1[p1++] : nums2[p2++];
        } else if (p1 < m) {
            return nums1[p1++];
        } else if (p2 < n) {
            return nums2[p2++];
        }
        return -1;
    }

    double median;
    if ((m + n) % 2 == 0) {
        for (int i = 0; i < ((m + n) / 2) - 1; ++i) {
            int temp = getMin();
        }
        median = (getMin() + getMin()) / 2.0;
    } else {
        for (int i = 0; i < (m + n) / 2; ++i) {
            int temp = getMin();
        }
        median = getMin();
    }

    return median;
}



bool check(char* s, int i, int j);

char* longestPalindrome(char* s) {
    int length = strlen(s);
    char* result = strdup("");

    for (int len = length; len > 0; len--) {
        for (int start = 0; start <= strlen(s) - len; start++) {
            if (check(s, start, start + len)) {
                free(result);
                result = strndup(s + start, len);
                return result;
            }
        }
    }

    return result;
}

bool check(char* s, int i, int j) {
    int left = i;
    int right = j - 1;

    while (left < right) {
        if (s[left] != s[right]) {
            return false;
        }

        left++;
        right--;
    }

    return true;
}



int str_len(char* s)
{
    int len = 0;
    while(s[len] != 0)
    {
        len++;
    }

    return len;
}

char * convert(char * s, int numRows){
    int len = str_len(s);
    char* res = (char*)malloc(len * sizeof(char) + 1);

    int a = 0;
    int b = numRows * 2 - 2 > 0 ? numRows * 2 - 2: 1;
    int count = 0;

    for(int i = 0; i < numRows; i++)
    {
        int j = i;
        
        int change = 0;
        while(j < len)
        {
            res[count++] = s[j];
            
            if(change && a != 0 || !b)
            {
                j += a;
                change = 0;
            }
            else
            {
                j += b;
                change = 1;
            }
        }

        a+=2;
        b-=2;
    }
    res[count] = 0;
    
    return res;
}



int reverse(int x) {
    int rev = 0;
    while (x != 0) {
        int pop = x % 10;
        x /= 10;
        if (rev > INT_MAX / 10 || (rev == INT_MAX / 10 && pop > 7)) return 0;
        if (rev < INT_MIN / 10 || (rev == INT_MIN / 10 && pop < -8)) return 0;
        rev = rev * 10 + pop;
    }
    return rev;
}



int myAtoi(char * s){
    printf("%ld",strtol(s,NULL,10));
    if(strtol(s,NULL,10)>2147483647){
        return(2147483647);
    }
    else if(strtol(s,NULL,10)<=-2147483648){
        printf("Thiss is the case");
        return(-2147483648);
    }
    else{
        return(strtol(s,NULL,10));
    }
}




bool isPalindrome(int x) 
{
    long long reversed;
    int original;
    int digit;

    reversed = 0;
    original = x;
    while (x > 0)
    {
        digit = x % 10;
        reversed = reversed * 10 + digit;
        x = x / 10;
    }
    return (original == reversed);
}



int maxArea(int* height, int heightSize) {
    int max_area = INT_MIN, i = 0, j = heightSize - 1;
    while(i < j) {
        if(height[i] > height[j]) {
            if(max_area < height[j] * (j - i))
                max_area = height[j] * (j - i);
            j--;
        }
        else {
            if(max_area < height[i] * (j - i))
                max_area = height[i] * (j - i);
            i++;
        }
    }
    return max_area;
}

char* intToRoman(int num) {
    // Allocate enough memory for the result string
    // Max length of Roman numeral for numbers up to 3999 is 15 (e.g., "MMMCMXCIX")
    char* s = (char*)malloc(20 * sizeof(char)); 
    int i = 0;
    
    // Handle the largest values first (greedy approach)
    while (num >= 1000) {
        s[i++] = 'M';
        num -= 1000;
    }
    
    // Check for 900 (CM)
    if (num >= 900) {
        s[i++] = 'C';
        s[i++] = 'M';
        num -= 900;
    }
    
    // Handle 500 (D)
    while (num >= 500) {
        s[i++] = 'D';
        num -= 500;
    }
    
    // Check for 400 (CD)
    if (num >= 400) {
        s[i++] = 'C';
        s[i++] = 'D';
        num -= 400;
    }
    
    // Handle 100 (C)
    while (num >= 100) {
        s[i++] = 'C';
        num -= 100;
    }
    
    // Check for 90 (XC)
    if (num >= 90) {
        s[i++] = 'X';
        s[i++] = 'C';
        num -= 90;
    }
    
    // Handle 50 (L)
    while (num >= 50) {
        s[i++] = 'L';
        num -= 50;
    }
    
    // Check for 40 (XL)
    if (num >= 40) {
        s[i++] = 'X';
        s[i++] = 'L';
        num -= 40;
    }
    
    // Handle 10 (X)
    while (num >= 10) {
        s[i++] = 'X';
        num -= 10;
    }
    
    // Check for 9 (IX)
    if (num >= 9) {
        s[i++] = 'I';
        s[i++] = 'X';
        num -= 9;
    }
    
    // Handle 5 (V)
    while (num >= 5) {
        s[i++] = 'V';
        num -= 5;
    }
    
    // Check for 4 (IV)
    if (num >= 4) {
        s[i++] = 'I';
        s[i++] = 'V';
        num -= 4;
    }
    
    // Handle 1 (I)
    while (num >= 1) {
        s[i++] = 'I';
        num -= 1;
    }
    
    // Null-terminate the string
    s[i] = '\0';
    
    // Return the constructed Roman numeral string
    return s;
}

int romanToInt(char * s)
{
    int t['X' + 1] = {
        ['I'] = 1,
        ['V'] = 5,
        ['X'] = 10,
        ['L'] = 50,
        ['C'] = 100,
        ['D'] = 500,
        ['M'] = 1000,
    };
    int res = 0;
    for (int i = 0; s[i]; i++) {
        if (t[s[i]] < t[s[i+1]])
            res -= t[s[i]];
        else
            res += t[s[i]];
    }
    return res;
}

char* longestCommonPrefix(char** strs, int strsSize) {
    if (strsSize == 0) return "";
    char* prefix = strs[0];
    for (int i = 1; i < strsSize; i++)
        while (strstr(strs[i], prefix) != strs[i]) {
            prefix[strlen(prefix) - 1] = '\0';
            if (!*prefix) return "";
        }
    return prefix;
}

#include <stdlib.h>

int cmp(const void *a,const void *b) {
    return *((int*) a) - *((int*) b);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    qsort(nums, numsSize, sizeof(int), cmp);
    (*returnSize) = 0;
    (*returnColumnSizes) = (int*) malloc(sizeof(int) * numsSize * numsSize);
    int **ret = (int**) malloc(sizeof(int*) * numsSize * numsSize);
    for (int i = 0; i < numsSize - 2; i++) {
        if (i == 0 || nums[i] != nums[i-1]) {
            int l = i + 1;
            int r = numsSize - 1;
            while (l < r) {
                if (nums[i] + nums[l] + nums[r] < 0) {
                    l++;
                } else if (nums[i] + nums[l] + nums[r] > 0) {
                    r--;
                } else {
                    ret[(*returnSize)] = (int*) malloc(sizeof(int) * 3);
                    (*returnColumnSizes)[(*returnSize)] = 3;
                    ret[(*returnSize)][0] = nums[i];
                    ret[(*returnSize)][1] = nums[l];
                    ret[(*returnSize)][2] = nums[r];
                    (*returnSize)++;
                    l++;
                    while (l < r && nums[l] == nums[l-1])
                        l++;
                }
            }
        }
    }
    return ret;
}

int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int threeSumClosest(int* nums, int numsSize, int target) {
    qsort(nums, numsSize, sizeof(int), compare);
    int closest = nums[0] + nums[1] + nums[2]; 

    for (int i = 0; i < numsSize - 2; i++) {
        int left = i + 1;
        int right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (abs(target - sum) < abs(target - closest)) {
                closest = sum; 
            }

            if (sum < target) {
                left++;
            } else if (sum > target) {
                right--;
            } else {
                return sum; 
            }
        }
    }

    return closest;
}

char** letterCombinations(char* digits, int* returnSize) {
    int len  = strlen(digits);
    if ( !digits || !len ) {
        *returnSize = 0;
        return NULL;
    }
    char* array[9] = {"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    int size = 1, cnt = 0, cur_size = 0, rest_size = 0;
    for (int i = 0; i < len; i++) {
        size *= strlen(array[digits[i] - '1']);
    }
    *returnSize = rest_size = size;
    char** ret = (char**) malloc(sizeof(char*) * (*returnSize));
    for (int i = 0; i < size; i++) {
        ret[i] = (char*) malloc (sizeof(char) * (len+1));
    }
    for (int i = 0; i < len+1; i++) {
        if (i < len) {
            cur_size = strlen(array[digits[i] - '1']);
            rest_size /= cur_size;
        }
        for (int j = 0; j < size; j++) {
            if (i == len) {
                ret[j][cnt] = '\0'; 
            } else {
                // every character need rest_size times -> j/rest_size%cur_size
                ret[j][cnt] = array[digits[i] - '1'][j/rest_size%cur_size];
            }
        } 
        cnt++;
    }
    return ret;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 /**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
struct DynArray {
  int** array;
  int size;
  int capacity;
} dArray;
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to check if the sum of three elements is zero
int isSumTarget(int a, int b, int c, int d, int target) {
    return (a + b + c +d == target);
}
void array_alloc(struct DynArray* dynArray){
    // if (dynArray->capacity==0){
    //     dynArray->array=(int**)malloc(10*sizeof(int*));
    //     dynArray->capacity=10;
    // }
    if (dynArray->size==dynArray->capacity){
        int** palceholder=(int**)realloc((void*)dynArray->array,(dynArray->capacity*2)*sizeof(int*));
        dynArray->array=palceholder;
        dynArray->capacity*=2;
    }
    dynArray->array[dynArray->size]=(int*)malloc(4*sizeof(int));

}

void finalize_array(struct DynArray* dynArray){
    int** palceholder=(int**)realloc((void*)dynArray->array,dynArray->size*sizeof(int*));
    dynArray->array=palceholder;
}

int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);
    dArray.array=(int**)malloc(4*sizeof(int*));
    dArray.size=0;
    dArray.capacity=4;
    for (int i=0; i<numsSize-3; i++){
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue; // Skip duplicate elements
        }
        for (int j=i+1;j<numsSize-2;j++){
            if (nums[j] == nums[j -1 ]&&j>i+1) {
            continue; // Skip duplicate elements
            }

            int left = j + 1;
            int right = numsSize - 1;

            while (left < right) {
                long int agg = (long int)target-nums[i]-nums[j] - nums[left] - nums[right];
                // fprint(sum);
                // array_alloc(&dArray);
                // dArray.array[dArray.size][0]=sum;
                // dArray.array[dArray.size][1]=sum;
                // dArray.array[dArray.size][2]=sum;
                // dArray.array[dArray.size][3]=sum;
                // dArray.size++;
                if (agg>0) {
                    left++;
                } else if (agg<0) {
                    right--;
                } else {
                    // Found a triplet with sum zero
                    array_alloc(&dArray);
                    dArray.array[dArray.size][0]=nums[i];
                    dArray.array[dArray.size][1]=nums[j];
                    dArray.array[dArray.size][2]=nums[left];
                    dArray.array[dArray.size][3]=nums[right];
                    dArray.size++;

                    // Skip duplicate elements
                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }

                    left++;
                    right--;
                    // break;
                }
            }
        }
    }

                        
    finalize_array(&dArray);
    *returnSize=dArray.size;
    int* columnArray=(int*)malloc(dArray.size*sizeof(int));
    for (int i=0;i<dArray.size;i++)columnArray[i]=4;
    *returnColumnSizes=columnArray;
    // for(int i=0; i<dArray.size; i++) returnColumnSizes[i]=
    return dArray.array;
    // return &array;
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
    int length = 0;
    struct ListNode* curr = head;
    
    // Calculate the length of the linked list
    while (curr != NULL) {
        length++;
        curr = curr->next;
    }

    // Find the position to remove
    int traverseTill = length - n - 1;
    int i = 0;
    curr = head;

    // If the head needs to be removed
    if (traverseTill == -1) {
        head = head->next;
        free(curr);
        return head;
    }

    // Traverse to the node before the one to be removed
    while (i < traverseTill) {
        curr = curr->next;
        i++;
    }

    // Remove the nth node from the end
    struct ListNode* temp = curr->next;
    curr->next = curr->next->next;
    free(temp);

    return head;
}

bool isValid(char* s) {
    int len =strlen(s);
    char stack[len];
    int top = -1;
    for(int i=0;i<len;i++){
        if(s[i]=='(' || s[i] == '{' || s[i] == '[' ){
            stack[++top] = s[i];
        }else{
            if(top == -1 ||( s[i]==')'&&stack[top] != '(')||(s[i]=='}'&&stack[top] != '{')||(s[i]==']'&&stack[top]!='[')){
                return false;
            } 
            top--;
        } 
    }  
    return top == -1; 
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    // Step 1 -- Check some special situations..
    if (list1 == NULL) 
        return list2;
    else if (list2 == NULL) 
        return list1;
    if (list1 == NULL && list2 == NULL)
        return NULL;

    // Step 2 -- Create Linked List and add first element.
    struct ListNode* root=(struct ListNode*)malloc(sizeof(struct ListNode));
    if(list1->val > list2->val){
        root->val=list2->val;
        list2=list2->next;
    }
    else{
        root->val=list1->val;
        list1=list1->next;
    }
    struct ListNode* iter=root; // I will use iteration to continue on our new list.
   
    // Step 3 -- While both lists are not NULL, do the necessary operations.
    while(list1 != NULL && list2 != NULL){
        iter->next=(struct ListNode*)malloc(sizeof(struct ListNode));
        iter=iter->next;
        if(list1->val >list2->val){
            iter->val=list2->val;
            list2=list2->next;
        }
        else{
            iter->val=list1->val;
            list1=list1->next;
        }

    }

    // Step 4 -- One of them reach NULL, but other list is still NOT NULL. So, continue to add.
    if(list1 == NULL && list2 != NULL){
        while(list2 != NULL){
            iter->next=(struct ListNode*)malloc(sizeof(struct ListNode));
            iter=iter->next;
            iter->val=list2->val;
            list2=list2->next;
        }
    }
    else if(list1 != NULL && list2 == NULL){
        while(list1 != NULL){
            iter->next=(struct ListNode*)malloc(sizeof(struct ListNode));
            iter=iter->next;
            iter->val=list1->val;
            list1=list1->next;
        }
    }

    iter->next=NULL; // Last node's pointer must point somewhere and that is NULL.
    return root; // return our merged list !!
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char **res;
int resIdx;
int strSize;
void help(int l, int r, char* str, int strIdx) {
    if(!(l||r)) {
        res[resIdx] = (char*)calloc(strSize, sizeof(char));
        strcpy(res[resIdx++], str);
        return;
    }
    if(l) {
        str[strIdx] = '(';
        help(l-1, r, str, strIdx+1);
    }
    if(r-l) {
        str[strIdx] = ')';
        help(l, r-1, str, strIdx+1);
    }
}
char** generateParenthesis(int n, int* returnSize) {
    resIdx = 0;
    strSize = n*2+1;
    res = (char**)calloc(1<<(n*2), sizeof(char*));
    char* str = (char*)calloc(strSize, sizeof(char));
    help(n, n, str, 0);
    *returnSize = resIdx;
    return res;
}

//merge and startMerge work as a singular function
//they accomplish the merge of two linked lists
//most of the code in these two functions is
//just checking in which way we should proceed with the
//sorting and the going down the linked lists
void merge(struct ListNode* node1, struct ListNode* node2, struct ListNode* ptr) {
    if (node1 == NULL && node2 == NULL) {
        return;
    }
    if (node1 == NULL) {
        ptr->next = node2;
        merge(NULL, node2->next, ptr->next);
    } else if (node2 == NULL) {
        ptr->next = node1;
        merge(node1->next, NULL, ptr->next);
    } else {
        if (node1->val <= node2->val) {
            ptr->next = node1;
            merge(node1->next, node2, ptr->next);
        } else {
            ptr->next = node2;
            merge(node1, node2->next, ptr->next);
        }
    }
    return;
}
//starts the merge, just a way to simplify things functionally :)
struct ListNode* startMerge(struct ListNode* node1, struct ListNode* node2) {
    if (node1 == NULL && node2 == NULL) {
        return NULL;
    }
    struct ListNode* ptr;
    if (node1 == NULL) {
        ptr = node2;
        merge(NULL, node2->next, ptr);
    } else if (node2 == NULL) {
        ptr = node1;
        merge(node1->next, NULL, ptr);
    } else {
        if (node1->val <= node2->val) {
            ptr = node1;
            merge(node1->next, node2, ptr);
        } else {
            ptr = node2;
            merge(node1, node2->next, ptr);
        }
    }
    return ptr;
}
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    //usual thing, checks if the list is small enough in order
    //to end the program ealier than necessary
    if (listsSize == 0) {
        return NULL;
    }
    if (listsSize == 1) {
        return lists[0];
    }
    //creation of pointers and then loop happens
    int j = 0;
    int i = 0;
    int currentSize = listsSize;
    //it plays around with the size of the array
    //in order to iterate through it
    while (currentSize > 1) {
        lists[i] = startMerge(lists[j], lists[j + 1]);
        i++;
        j += 2;
        currentSize--;
        if (j + 1 == listsSize) {
            lists[i] = lists[j];
            j = 0;
            i = 0;
            listsSize = currentSize;
        } else if (j >= listsSize) {
            j = 0;
            i = 0;
            listsSize = currentSize;
        }
    }
    return lists[0];
}

struct ListNode* swapPairs(struct ListNode* head){
    if ((!head) || (!head->next))
        return head;
    
    struct ListNode* tmp = head;
    head = head->next;
    tmp->next = head->next;
    head->next = tmp;
    
    head->next->next = swapPairs(head->next->next);
    return head;
}


